package org.suffix.logreg

import com.aliasi.matrix.{DenseVector, Vector}
import com.aliasi.stats.{AnnealingSchedule, LogisticRegression, RegressionPrior}

object WalletDemo extends App {
  
  ///////////////////////////////////////////////////////////////  
  /////////////////// data for the wallet problem ///////////////
  //////// see the tutorial for a description of the problem ////
  ///////////////////////////////////////////////////////////////
  val y = Array[Int]( 1, 1, 2, 2, 0, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 2, 2,
    1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
    2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 1, 0,
    0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0, 1,
    0, 1, 0, 2, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 2,
    0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1,
    2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1,
    2, 0, 2, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 1, 0,
    1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2,
    2, 2, 2, 2, 1)
  val X = Array[Vector](
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )))
  val X_TESTS = Array[Vector](
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 0, 0 )),        
    new DenseVector(Array[Double]( 1, 0, 1, 3, 1 )))
    
  ///////////////////////////////////////////////////////////////
  //////////////////////// code starts here /////////////////////
  ///////////////////////////////////////////////////////////////
    
  val regression = LogisticRegression.estimate(X, y, 
    RegressionPrior.noninformative(), 
    AnnealingSchedule.inverse(0.05, 100), 
    null,         // reporter without feedback 
    0.00000001,   // min improvement
    1,            // min epochs
    5000)         // max epochs
  val betas = regression.weightVectors()
  for (outcome <- 0 until betas.length) {
    Console.print("Outcome=" + outcome)
    for (i <- 0 until betas(outcome).numDimensions())
      Console.print(" %6.2f".format(betas(outcome).value(i)))
    Console.println()
  }
  
  Console.println("Input Vector         Outcome Conditional Probabilities")
  X_TESTS.foreach(testCase => {
    val conditionalProbs = regression.classify(testCase)
    for (i <- 0 until testCase.numDimensions()) {
      Console.print("%3.1f ".format(testCase.value(i)))
    }
    for (i <- 0 until conditionalProbs.length) {
      Console.print(" p(%d|input)=%4.2f ".format(i, conditionalProbs(i)))
    }
    Console.println()
  })
}
