package org.suffix.logreg

import com.aliasi.matrix.{DenseVector, Vector}
import com.aliasi.stats.{AnnealingSchedule, LogisticRegression, RegressionPrior}

object RegularizationDemo extends App {
  ///////////////////////////////////////////////////////////////  
  /////////////////// data for the wallet problem ///////////////
  //////// see the tutorial for a description of the problem ////
  ///////////////////////////////////////////////////////////////
  val y = Array[Int]( 1, 1, 2, 2, 0, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 2, 2,
    1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
    2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 1, 0,
    0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0, 1,
    0, 1, 0, 2, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 2,
    0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    1, 2, 1, 2, 1, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1,
    2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1,
    2, 0, 2, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 1, 0,
    1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2,
    2, 2, 2, 2, 1)
  val X = Array[Vector](
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 2, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 0, 1, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 0 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 0 )),
    new DenseVector(Array[Double]( 1, 0, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 2, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 3, 1 )),
    new DenseVector(Array[Double]( 1, 0, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 1, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )),
    new DenseVector(Array[Double]( 1, 1, 0, 1, 1 )))

  ///////////////////////////////////////////////////////////////
  //////////////////////// code starts here /////////////////////
  ///////////////////////////////////////////////////////////////
    
  for (variance <- Iterator.iterate(0.001)(_ * 2.0).
      takeWhile(_ < 1000)) {
    Console.println("Variance=" + variance)
    evaluate(RegressionPrior.laplace(variance, true))
    evaluate(RegressionPrior.gaussian(variance, true))
    evaluate(RegressionPrior.cauchy(variance, true))
  }
  
  def evaluate(prior: RegressionPrior): Unit = {
    Console.println("Prior: " + prior)
    val regression = LogisticRegression.estimate(
      X, y,
      prior, AnnealingSchedule.inverse(0.05, 100),
      null, 0.00000001, 10, 5000)
    val betas = regression.weightVectors()
    for (i <- 0 until betas.length) {
      Console.print(i + ") ")
      for (j <- 0 until betas(i).numDimensions()) {
        Console.print("%5.2f ".format(betas(i).value(j)))
      }
      Console.println()
    }
  }
}